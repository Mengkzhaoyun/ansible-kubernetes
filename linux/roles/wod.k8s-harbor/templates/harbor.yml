---
# Source: harbor/templates/adminserver/adminserver-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: adminserver
type: Opaque
data:
  secretKey: "blFJbUJuNVNWQ0hMN2VocQ=="
  EMAIL_PWD: "cGFzc3dvcmQ="
  HARBOR_ADMIN_PASSWORD: "NTg3NzIwMTU="
  POSTGRESQL_PASSWORD: "YWJjNTg3NzIwMTU="
  JOBSERVICE_SECRET: "QkJSUXd5U2tzaUhacUpVaA=="
  UI_SECRET: "QkJSUXd5U2tzaUhacUpVaA=="

  CLAIR_DB_PASSWORD: "YWJjNTg3NzIwMTU="


---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
  BASIC_AUTH_PASS: "QkJSUXd5U2tzaUhacUpVaA=="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "YWJjNTg3NzIwMTU="
---
# Source: harbor/templates/ingress/secret.yaml





apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRnd09ESTNNVEV5TVRVMVdoY05Namd3T0RJME1URXlNVFUxV2pBWk1SY3dGUVlEVlFRRApEQTRxTG5kdlpHTnNiM1ZrTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCCkFNOGlET1YvY3RTdDAvb2R5dXZBOEl6QkRsUUtlQzlSa3AyWDJOUXlHZ3hidHZkemlTQkJJUGJObkQwV1NWcWEKdk4wSlhzdzJZbUNYY3hIampHWE9kMVNFZlRGZE1MeVV1RVNjREhxdGtNSzVOOW5kZXl1RXpJWHgreXNMSlNOWgpBNGY0RHo1SytQZ0x4ZUJnOVVyN0x2bnp1S09HdVV0MTUzSGMyalcvZGpQWEhEbzNDZXkyUnc0RXVJS2Z6emNrCm1pUnRMSW9HbFJqNlFJYVp4UCtIUm5lOHhON2V1emt4dndpQ2hVckZyQ1JHM2pqQVliWWp2emp4SWVjZGVlSXMKZXI3TUV4SHloTG1Xa3gyQUVubGVPTE1tREs5czZob0lCSWVneUZ2anc2QWg4ZWRGODZ1V2xtT2M2TGQ1VTJpRQpzQXBaS0dWanJFd3h1Q0pQTytDSUlkRUNBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDR1NJajJzOFhudzA0aSs2L2dQd3p1QmpWaEtycDZraktBZWdIQjlycG1qem5sL2ZhRApCejFhUER5dm1ibGQveUtXb2doTzJnN3dlT1pKWnR6MmZYbW5WbG9hNlpyUXo3MGVhL0d5S3Yva0sxem1BUllxCkY4NDFUK3dvakVKWGJDVSs3NUlwamtDUTl6N2llb1VlTDJzcklXbWg3TEpUMHhwREhkQXk0SVN4YTZqOEVYUFEKWS84OTlyMjlTMmtia0hDYkdPaVNrbGU1c1diU1lGZTM2a2piNzlZSkNTZWNkcFVrR3BINzRQQTNyUVJTbjhIOQpQZUNXUUZVQ0d1b3FlWnptNWptQVRsOWZtTVAzRFN0dkkrVWxpdVJCazZhRU9XSDRiOTFhVlFZUjg0WGR3RzJLCjE0dmUrTEdPcVNqb0t5UGUxTUxENHgyMFhpbEM5OVpDTWpoZgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBenlJTTVYOXkxSzNUK2gzSzY4RHdqTUVPVkFwNEwxR1NuWmZZMURJYURGdTI5M09KCklFRWc5czJjUFJaSldwcTgzUWxlekRaaVlKZHpFZU9NWmM1M1ZJUjlNVjB3dkpTNFJKd01lcTJRd3JrMzJkMTcKSzRUTWhmSDdLd3NsSTFrRGgvZ1BQa3I0K0F2RjRHRDFTdnN1K2ZPNG80YTVTM1huY2R6YU5iOTJNOWNjT2pjSgo3TFpIRGdTNGdwL1BOeVNhSkcwc2lnYVZHUHBBaHBuRS80ZEdkN3pFM3Q2N09URy9DSUtGU3NXc0pFYmVPTUJoCnRpTy9PUEVoNXgxNTRpeDZ2c3dURWZLRXVaYVRIWUFTZVY0NHN5WU1yMnpxR2dnRWg2RElXK1BEb0NIeDUwWHoKcTVhV1k1em90M2xUYUlTd0Nsa29aV09zVERHNElrODc0SWdoMFFJREFRQUJBb0lCQVFEREZDT25SWWhGeTgwWQpCRlVvQWxmTGlNdFExV2RwMFY3UGM4S3YzdHZ2aGJWbGluZThXL3FLMXd6dDczNTRpY0dVUDQzN3NNQ29qaHErCjMxdE1TczdTVjlGODIzTGFPUXJ1K3pVNW1SdjhlT3FrRXRjOUhsNXRUSUNzZ2x1ZzFlWGdlZjBKUXgwR3FEZmQKNGhORFloeFZKbmhmOHJPeTRVRndXSHRmSVlwV3VPOWhsOEpRM1diSUx1YWZiVDlTNTZNTWR2K1BqWExWS0dFaApqcmpCZi9KZ1RGRTBack5zN08zbGdvMERnMU9yREprWE9BM1VQMFVHM2NORTh6Ri94UHc4YUtEUEtPRXk4SnFLCk1wS3pQY3AvdEtrcDJmOHUzbGFKejVLVzBPRGthSnZvY2l3V2I2dGZKL1k5c0tYR1ZjL05QeXFXQXJtK2N3cVQKS3BNNTJpdU5Bb0dCQVBtUnJ4YnFFN3BIMHd0anRlMHFBUzFWZjJwei9URWxNei9mMW4wMXI4dVhuVkZtalZrZQpqak9zSE84bDFmbUVqLzhNcnVsUmVDdmMyM3BEYmNHWUxLTTB6clYyQ1lqMDdXUXBqOU9VMVlPeW9XZU1BbjFUCkJXa1U1cWtORUlDWnV1N0c4VnFuTzYwVVZkTFVKQ3RvNEtpWE9VNDJsQ2pyZStCVmVadjFYN0czQW9HQkFOUjQKYm1KUjZySytJZXVqeHZRSjVqZzZyN1hqMUpVQzRjUDhPM1JxVVBpTXZNVXBXMlJhaEtSQnhaSkZLM1dQMlV2RApyb25NbjlNT3NqTXJNcUxGaTRMWEN5ODNHK2p2VStIMVZ3R1FQOVhmb0plR0gzWXpnaDB5RzRqUTdxMnNtd2VWCnJtY1dETFNxVnhYTVY5bW8xWDhiVE1lRW9YT04yV0VTTnRxM2dLaTNBb0dBQlBneXJWa2g1VzZ5dENKYktBclQKRlMwRHFZSC93Ni9DOG4ycGpycTM4bXpsZEE1L3VBdVV0MUN4RHM0SkVidmpCaWdoZjRIZ3k3Yk5KQVVkdFdJcgpXV0NlMFJ3MW1tV09LSlZ2U0w1STlpTmpkV1ZqVTAySTZRdkNnQkZEaDl3SHplTm1RUERkamxlK1VjRnBxdmVlCnFaekJSbDV0MnRhOWs3ei8rK3dKNk1jQ2dZRUFyNFY5eXdOWkc2Z3VaWGU2MThlRnhGWFc2aS80WWRFcnFMZ3EKZFpXT3BvVzlQRE5hS0tFT2lwTTdJQWE4VERZMWtIMXJKck5BSlI4eTMwcUVYaXRMZ1I4ZFFqZ0llbm1ibGtNVApTVnRkSU5YSTJPUVlBWkd6bjJMUmxFamxvOXUvaHBpRXB1eDBPcHV0clhoTjZxV3JHWUgzLzZyMXBYdzlaQStqCitUTTJ1aWtDZ1lFQXJLazF6QTJnNmw0cUp1MjFzVUVRdnlGYkRjRFFzMXR5WWVFUWRnK2Z0N00zcjFhYlBrVVMKWGFrMEl4Z0pjbmJxaGE0L0NWYmRoWUxldzJIK0RXdWVBRXpOMTN4SmMvRjNuZGxXNGdDTFdxckRIWnRxN0I3QwpNRTZjWjAwVWp0S3hndmlyeGJUN0luTmFva1pCSkJpYnN4aHZLNnNkVzZVL1FLNHo4MHFZMVFjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1VENDQWMyZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFVTVJJd0VBWURWUVFERXdsb1lYSmkKYjNJdFkyRXdIaGNOTVRnd09ESTNNVEV5TVRVMVdoY05Namd3T0RJME1URXlNVFUxV2pBVU1SSXdFQVlEVlFRRApFd2xvWVhKaWIzSXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3I5LzI5Cm1ra0J1Z2JvazZBLzFJNytDT2RmM3diY1I0bUNBejAwbkFrV3l3eFQ3RTJQcnRTZFo3UW82TFBtaGl2SWJyRngKdVN3UkFuOXFzNWx0RVdUQnBwR1ZvYUh1cjRJOURqNmhlNmt1dlRUK09KUnVXUmg0MUJPRmIveUlWckQ2MHJFTQp4MnlxZFpVejlBeUk3RUk1SFRlcnlQbnYzSVlQdTdNUVdaZm9idUJwTlMxVmthai9xMnBrZno0MVQyTmpaSlZkCnRuOEZ0N3hVYTlEeXdGVStYMXNnd1JKWXN6VkZNdnhucjYyamR6MTloZWhVRkV3aGZKUmRTK3pjS2RxYVgxL3cKUlc5dmVSNEwrN01CSjVEUHVMbGVSbEZVRFlSd3BXdTEzakNVRmtocTJXVlBRUzR2eGtvenhMZ2dwN2dmNmp4awp4N0loYWJTY003a3l3N1VKQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBQTZSR01WanlVL1doeTk5b0Izc2RvTUduYUZtOEVVRTRqdHU5elplYUUrTVVxM3ZhWTNZZQpabkVEN3BXZytEcU5KYUR0Kzlud2xDQ0pNQ0cwV0x1Tkx2cG8rdHVGT2tKUW14M1hna0NXcmJLLzZxdDlDTHpXCkdLelZnUFc1ZDJ1R2prenJxRlJNQVFVTG9nTmJtZ2NndGhjYldyQ0FONm9QZnNUU1AxbnViU2pjdEpvZEZING4KYWg2Rmx1NWNFa2ZYMGJob2hxUXNmM2hReG4zVEZNQm1GWGE2aGdRaHltb0RrdVRoQW54TGtZbmNIT1BlY2Z3NApQd2paZEh1NWZ0aVlBMlVheGFiQmdQbzQwNWRkLytsaGpqM1lWZld5elJ3dytZYUZrVkRheUtCVmRuMXQ0NDhWCmRQUFZzNG9BY0laMlI2R0ZCQzA4WmVYa2ZkTDhzaXhMRlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="



---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: Opaque
data:
  secretKey: "blFJbUJuNVNWQ0hMN2VocQ=="
  JOBSERVICE_SECRET: "QkJSUXd5U2tzaUhacUpVaA=="
  UI_SECRET: "QkJSUXd5U2tzaUhacUpVaA=="
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: Opaque
data:
  httpSecret: "QkJSUXd5U2tzaUhacUpVaA=="
---
# Source: harbor/templates/ui/ui-secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ui"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
type: Opaque
data:
  secretKey: "blFJbUJuNVNWQ0hMN2VocQ=="
  secret: "QkJSUXd5U2tzaUhacUpVaA=="
  jobserviceSecret: "QkJSUXd5U2tzaUhacUpVaA=="
  tokenServiceRootCertBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFERXdab1lYSmkKYjNJd0hoY05NVGd3T0RJM01URXlNVFUwV2hjTk1Ua3dPREkzTVRFeU1UVTBXakFSTVE4d0RRWURWUVFERXdabwpZWEppYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM2RWVNWTg0dGRIUGRrClRYKzZxcDdhUHc2SGJKRElrUlpuMElrRDc3QlQ5NDlZU1NLNzFiL242YkpVNXRLRjhyUDNZd2dyZzAxdE56blQKUk4xdFhjVERrOGZkdWFYUzVFKytSZmdIQzNJSTh0R2JWZzNkTngvMFd6TkxBMWJWQW9pVlo4N014Y3FSYXRMWAo4ZW5uajdUZHd1b1k1Z1pEc3habExHWG1USWsxOGlWdThwY0pHempVTUJ6a2FxVUIvOU1zS29ZQ210dHpQMzNtCi9PQmZoblcxb3JwbGVEOVEzUDlFVHdKQWtzcUxBUTNTenUyYjJIbHRSZ2o1VS9ab01HT2Fsa1lidG8wcjRJbWgKSzJYRFk1YWwrUzF6L1p3REM0YjhSVmxVZTdsaFd6UzNGYTVrU0VQbVFZV3lZMXAyeVQ2b2ljbE4xVVFaTnFxYgpEcU9ob0N6VEFnTUJBQUdqUHpBOU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGCkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKZGc0R0plKzVtUnE3TXViWU5IbkFvZTF3ejlxNG5DVUJMRm5pUmhNQkVEb01MbTVCNVVBQkgrRGJvaUpEdmZ1Ngp3WWt6S2Y0azNrcUU5aTYrbXA4SHNjUzVHOWJzNTNoQ0tSYVpXN0RzMTF0UkVDc1BIbDRvQmUzaGlEeHNuWDFDCm0vTWFtVzlpdXhHd2ZwZWpxeVVCZnhjMVlTU1BMbU5wdVlGOUJLK2M3dTUvbEwvcjRzM2lFQlhFVFk1YmsvSDYKWE5tYWVyNFVtRlpPOG56OWhIQU9hQUxyTEhHemFlbGNycFRRVU9QTVYzSHJpQzNOR3pwVENMb3FUWWhUNmxORgpsVmdpVHp4ZXlnalphazFZbFZMUHBLYlhEUHoyeHZvaHRPT2k5eE9vdFhkMlhtbFhRMjZJZ1NORkRqRGVCb0VwCnpXMENTY2pkWHU2dWlrMWNLZ1JyQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tokenServicePrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWhIakdQT0xYUnozWkUxL3VxcWUyajhPaDJ5UXlKRVdaOUNKQSsrd1UvZVBXRWtpCnU5Vy81K215Vk9iU2hmS3o5Mk1JSzROTmJUYzUwMFRkYlYzRXc1UEgzYm1sMHVSUHZrWDRCd3R5Q1BMUm0xWU4KM1RjZjlGc3pTd05XMVFLSWxXZk96TVhLa1dyUzEvSHA1NCswM2NMcUdPWUdRN01XWlN4bDVreUpOZklsYnZLWApDUnM0MURBYzVHcWxBZi9UTENxR0FwcmJjejk5NXZ6Z1g0WjF0YUs2WlhnL1VOei9SRThDUUpMS2l3RU4wczd0Cm05aDViVVlJK1ZQMmFEQmptcFpHRzdhTksrQ0pvU3RsdzJPV3Bma3RjLzJjQXd1Ry9FVlpWSHU1WVZzMHR4V3UKWkVoRDVrR0ZzbU5hZHNrK3FJbkpUZFZFR1RhcW13NmpvYUFzMHdJREFRQUJBb0lCQUdmRFA5U1RSRDJKd01CVApvNDR5UmVISlZrM1pFaWgzR0hxT1JVcEhxUm82TE5yNzlmMnZwcFFxczhNNjhWMjNTZnNFWS9MNEJ2NkgxSnhuCmc5L1FjY0RyTVlNSlcxcnU3VFZiaVlSTU1xeWcxSmorZFQ3TzFlZ0x6OS9lSGRjdDBZTVgzN0E4QU1uMU8xMG4KVDl4TlBIeUtqTWVUeHh5THkwcGladlQxNjNLRUFIOTMzZllkcGhHdXZ1WVRxNDlJakU1cHNGSTh5dXZiWVlNdwpld21Tb0poMGFVUEFOaXdjNlpScjFDUmZvdjhLY3pmdTU3Q0RaT05XRDJBcEZSYSs5U3BUZlppTmdNZHZLWWZ3CnltZUZ5bHBoQmp5UzhrYzJnc2hoNXhFc3VocEhFLzhzRW1xMTVxK1ZvQ1B0MXhEdkJLaTI4ckZHcithUTF1eHEKNzNqbkFNRUNnWUVBd1c5QllrL0hvS1J3OVlrNTJoeGdrd0V2akZFSTN6dTRVTWxMY292ZVpWcTlNWmZRYy9pSQp6Y3BBeWYyc3MvVmdyaG8zN3diOUF4bTVOUTgvSG1UK3JFNVB5SEdZZjJjak9zeEd4VG8vaVp6dkx6dGlqYWFFCnNiSTJjdURYMXRwZFFjMGViTnVPMUlDMkw2bVh0ZW5IN1M3S3BiUjR0SjRxYjczU1QrNlFDU0VDZ1lFQTlrRFIKdEdRdUxtS3hhZHBWNWg0U2NEK1BaajBZZk9xVVcwQjI0QlJvL0U2ZUMrNEhHYnRzYVJ6VDBWeDEzUmx1TFROYwpKcHB3ZmE3a09GM3ZnNTFEQktmWHloczFEZ2orVlNZc1VVdnM4aXZTVmlraGpkRkVwVjc3dndyNGY5di8zNDBlClM4TXU1TkhYYUtmcDlZVDc5SjNOYnNrbEV6NXdKNzhqTlgxS3MzTUNnWUVBa1F0UnBkeFl2bFpQOVcxZW1mUXAKWGxISFM1bi80eFF1MHpUOWcvanBYR3E3N3hIOVZ0aUlESGVhT1Z3a1FoUysyQTRFM3hFSWEyakFmYzdlNzNXZgptYWhuSHRBL0gxbEJDM2Zkb1VwYUZtQTg0ZGZQd0pPYWNIeEhZOERCVi9RSmRhdlBJcVZINW9SVkdFdzgzRVZlCmlyVkpjeE51WjFFcVZQdXJWaEIycE1FQ2dZQkx4UFFCWWxYSFZmeXF5bEJsNXRqYml1TVBuVHJjckwwTE90R1kKN3c3Q20xb0w1Nmh0cFhxYytRNi91NGhVaUkrYS90T2EyU2hGczd0ckVKUXkxZitaL2g3cWcrYVdNL1ExdFBJcgo3WVd4bWdRMUdLREhaeDJOR0tXelNhZmVoNDI2ZGt4ZEdXaGpaYUczQlB0NjNQazljaFNVd3ZWU2I0TEk2QW5vCldtM1N1d0tCZ0diNFBDeGdPS29qTUc1N1d5ME8rQS9CNG5kdXR2eWt3UmlTeGg0YzNoMXgwM0MzZFFPTnVKNzgKeXBINTkxWW1Ib0ViT0lrZExRYjAraisxVWVwcjRvQUNUVUVidXB0MlRDVGp3R0dUdWJqRXhDeHVqYlBzc3ZuYwowcmVFeHZkeElyVDd6MmFWQURBa1pXSE5IV1owRjhxRHRhT1RzVW83bXJBWTRPRXNxZjF0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  
---
# Source: harbor/templates/adminserver/adminserver-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: adminserver
data:
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  EMAIL_HOST: "smtp.mydomain.com"
  EMAIL_PORT: "25"
  EMAIL_USR: "sample_admin@mydomain.com"
  EMAIL_SSL: "false"
  EMAIL_FROM: "admin <sample_admin@mydomain.com>"
  EMAIL_IDENTITY: ""
  EMAIL_INSECURE: "false"
  EXT_ENDPOINT: "https://harbor.wodcloud.com"
  UI_URL: "http://harbor-ui"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-ui/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  LOG_LEVEL: "info"
  IMAGE_STORE_PATH: "/" # This is a temporary hack.
  AUTH_MODE: "db_auth"
  SELF_REGISTRATION: "on"
  LDAP_URL: "ldaps://ldapserver"
  LDAP_SEARCH_DN: ""
  LDAP_BASE_DN: ""
  LDAP_FILTER: "(objectClass=person)"
  LDAP_UID: "uid"
  LDAP_SCOPE: "2"
  LDAP_TIMEOUT: "5"
  LDAP_VERIFY_CERT: "True"
  DATABASE_TYPE: "postgresql"
  PROJECT_CREATION_RESTRICTION: "everyone"
  VERIFY_REMOTE_CERT: "off"
  MAX_JOB_WORKERS: "3"
  TOKEN_EXPIRATION: "30"
  CFG_EXPIRATION: "5"
  GODEBUG: "netdns=cgo"
  ADMIRAL_URL: "NA"
  RESET: "false"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_URL: "http://harbor-clair:6060"
  UAA_ENDPOINT: ""
  UAA_CLIENTID: ""
  UAA_CLIENTSECRET: ""
  UAA_VERIFY_CERT: "True"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "0"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  CHART_URL: ""
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:abc58772015@harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-ui/service/notifications/clair"


---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 50
      backend: "redis"
      redis_pool:
        redis_url: "harbor-redis:6379/0"
        namespace: "harbor_job_service_namespace"
    logger:
      path: "/var/log/jobs"
      level: "INFO"
      archive_period: 14 #days
    admin_server: "http://harbor-adminserver"

---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-notary
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC8zCCAdugAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE4MDgyNzExMjE1NFoXDTI4MDgyNDExMjE1NFowGzEZ
    MBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBAN84qCzOldo1EvOi83dPW/b5CDUngsWjVCYt9FOoouDkZkYkCh5f
    jj2P4qJxjhuRtZ0sobLOsov8sV39psHM2I9hD5TtZM3zmLozb1ynWK7yO/ODhnuZ
    EwPniBO5gfJBf7W1esWRynsjUoPgqr+R4A2H/qpqsXct/EEda2v9irLJ5NxyCnz1
    YikyELPvbX5eZ7NJLAxTTlaK0+APzjj5Ma+0eU2MKbFhJhMeIKyCI4pVY3cIC7f9
    q/ceNA2Yd817hXQPHmVeiXYlDgFCKqnKQDzniOozy4KyGNvYX/gIb/oxTfCdstOO
    ZFCSRx1x5RRSTNjqkXDg9x1rjX4aNi2qXsMCAwEAAaNCMEAwDgYDVR0PAQH/BAQD
    AgKkMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTAD
    AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQDR18ahYP17XBYELTzz8ERcv5pyY6EZNuAk
    dZ4xXg6B7NT0iDfxVl3m9PZxPLdG0kv76xbcmn55/XAU2Pf4U7ug7VAsFG0Kq9Vv
    SYDrAxIFGscNSxHZ/HfYvpvtzXXpSNoTHoq3EED5QdCss7A4rzZjSi/xWf4ZljfT
    NPxxHf6GRkx1hdSUPk7D9w3Fij4K1U43lVlWV2pvm2V1c24jWRf68u0XWG3W8mlz
    Hl2JdT1yEMmXw+gqG5z5kwbyIWPdJi8Sn2YdzyBQMxEKa3hAty1K1Xu0lxqt3US/
    2SJxBNtozw1ps6ehU2h5IPFXlpw5b1uZoRp8oMm0UQVhfihamq24
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIC9DCCAdygAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDExBoYXJi
    b3Itbm90YXJ5LWNhMB4XDTE4MDgyNzExMjE1NFoXDTI4MDgyNDExMjE1NFowHzEd
    MBsGA1UEAxMUaGFyYm9yLW5vdGFyeS1zaWduZXIwggEiMA0GCSqGSIb3DQEBAQUA
    A4IBDwAwggEKAoIBAQC5TeHtyPAOij7ZH5Q6qA6C8kq0scFhlmNLN62NTTsogO/R
    cJqxMVUh114ZXpJN9aNCjmi0SLNlfl8MayMYs6m6dXXitg5Pj/c/PdHeA3RnR7zu
    4HIVhpxVjx2MEdjX+5jS9yyRbODA5AEmsV/0Cq+RJSbdwOs0Q7Xhpw7vCqEWu+6g
    M5koFGrTBoYNDDme/Ras/pO3TlsNSQaVTOGPiw1rd3AFbpkT0ROZbj9EDn1/cFvS
    nqm0T9I9xUwts08b7d4dtDax1RMJJumu5FYCjC4eWg10lTJH6YARtiabpHOWfT1Z
    z1BISdlMPBq/4//EDqoydvOGCF/JbzHChPBIg6szAgMBAAGjPzA9MA4GA1UdDwEB
    /wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/
    BAIwADANBgkqhkiG9w0BAQsFAAOCAQEAFH8E+bubibmZSngCITq0ODiCGCM0WH5p
    fSvZ8w/NfAx43bj4uG4N9RASOaNZUZ29in8C8XLlaXXIkrOc7fO9q+6v0/nzbJax
    OE9nte2sR0DHDeWooKdu3uxXdCKH6dOyS029hTwyU8SUHFCgIc/nKwHiGTsowzrJ
    0G8vbtcWHWIeJ0GljmOZJqbnr67f3PJJzcD3AvGDkvIXCqLdJ6kSCfzmEVARskV0
    1oRBepSf9KkBtMDPn/eHsJHWad2VmvLKh0UsdKCpAsojoDy7VDies+nS1PqfqXUu
    VX+tOze6zpCzqfJ0fRwANam135ztE4h9jAJDYN2O8e82+A/mNbFWqw==
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAuU3h7cjwDoo+2R+UOqgOgvJKtLHBYZZjSzetjU07KIDv0XCa
    sTFVIddeGV6STfWjQo5otEizZX5fDGsjGLOpunV14rYOT4/3Pz3R3gN0Z0e87uBy
    FYacVY8djBHY1/uY0vcskWzgwOQBJrFf9AqvkSUm3cDrNEO14acO7wqhFrvuoDOZ
    KBRq0waGDQw5nv0WrP6Tt05bDUkGlUzhj4sNa3dwBW6ZE9ETmW4/RA59f3Bb0p6p
    tE/SPcVMLbNPG+3eHbQ2sdUTCSbpruRWAowuHloNdJUyR+mAEbYmm6Rzln09Wc9Q
    SEnZTDwav+P/xA6qMnbzhghfyW8xwoTwSIOrMwIDAQABAoIBAD33iYIXHBAAsxuw
    r8UdxhyMIedjOiQEQpg4ulTyasIUvB3x5gkzUiDLALDDK3HenwX20ZTYawWZyPdC
    LK5qBmxQM2fpMcfxgOEpLzFrPlX7a3cGn6ALL+R8w4i/vyAbBvQlrEXFfzOCC9CA
    qHHX0PZc0i5+ASmtKvmXACt4Bn6vMGFT0zscLu/BJl05T6DrHgV3+ON3atXFtl6e
    YgFJ1637H0QPBjr9wOVw4X2F5/1sO/3Ko5WdF0dXMjAuyn8aWW06t89/N/jE7+ql
    ady9O5x6H5uT+s4e5hwjwD1T0gn292u6JN0gDICy7i2PCUZgwS68CHCSb6m3ci+U
    MLBTrmECgYEA1ot1awB7XssAngq6h2z7KOYcD9QoWpr5KCtoSodzeplzs/gW7Ouc
    DRpPxT2JMYyB08YEbNZhVcWTjZqs/rUpqz5THb34zURMo71c4zZLrYe1A3Mre35f
    K6lVjw2A6aZIOPyGLa6tuQGtM0AFoO2ZkU1LAmLZPRcqSF4ZVbEI/m0CgYEA3RwH
    h7ybZ/AZdXYO0wQjrQLC8vTabCGRF/k7oRTBiyjjYxl2w4rLbkeXIVDFniTgf22p
    97ZxKZOLq4SrQ8OM0yPr5uKtaiq/KlWkjSvz9uuFi9TL5lPeqeB7jBhk3b10CAYs
    lHl/+rducb/psPY0t4dWAMhprYLa2YR96p+mzB8CgYA+u5qCxipMxnkQvTxbev9Z
    rydHbZa7H5N5LnAZUs/uak5Nsl4pup7vqeDnYJ3sEhSoMr96f5kIdnQ1tKOe+qQL
    gXbWPIUyqCTsv+MYQPkR7Zt9PcDaJFJ5ttLguGcYatm1aAln9Cqx7Q6S7MZ4juEX
    fo1PTk4NMefYL0OjLdfeZQKBgFTBw9kyYVgMX5X5NWGKOqq9XkGHvpqom1fXQBZV
    QIO5nsCEKFR4xdZ2NuacccRXWn8+aGL+Wo6XcnjDGGuXcEoXgPw2dEc4L6NoxPUg
    nhpO2hhp7+dQyw/Pb0yapT+iufHBfCFGGdrfqcSMzmX5WufnRv5x1KCggofTE/l2
    TZf9AoGBAI50h8Q3aJp0Xhj9EAlf79rcL9QXfeKlgkm/BppvmPqeNbrcXQCWOY1L
    /MuJwCTYqIF7WOFjeAVtzGwakig4VJ3c2mvuGJUzHWNMXDXRgVxzZQACEu0dq+m4
    Pjv0aGOXoQHrji9MqdgJwqVtD5+o8smPswU/p9W/v0vPoMWPFJTm
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:abc58772015@harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "https://harbor.wodcloud.com/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:abc58772015@harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /var/lib/registry
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
    redis:
      addr: "harbor-redis:6379"
      password: 
      db: 0
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://harbor.wodcloud.com/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-ui/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s

---
# Source: harbor/templates/ui/ui-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-ui"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080

---
# Source: harbor/templates/adminserver/adminserver-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-adminserver"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: adminserver
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: harbor
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml

# clair host isn't configurable yet.  this creates a service
# to get it working for now.
# see https://github.com/vmware/harbor/issues/3250
apiVersion: v1
kind: Service
metadata:
  name: "harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 6060
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/redis/redis.svc.yml
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
spec:
  selector:
    release: harbor
    app: "harbor"
    component: redis
  type: NodePort    
  ports:
  - name: redis
    port: 6379
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 5000
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/ui/ui-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-ui"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: ui

---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: clair
    spec:
      containers:
      - name: clair
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/clair-photon:dev
        imagePullPolicy: IfNotPresent
        args: ["-insecure-tls", "-config", "/etc/clair/config.yaml"]
        resources:
          null
          
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: jobservice
    spec:
      containers:
      - name: jobservice
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        envFrom:
        - secretRef:
            name: "harbor-jobservice"
        env:
          - name: LOG_LEVEL
            value: debug
          - name: GODEBUG
            value: netdns=cgo
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        emptyDir: {}

---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: notary-server
    spec:
      containers:
      - name: notary-server
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:abc58772015@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tokenServiceRootCertBundle
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-notary"
      - name: root-certificate
        secret:
          secretName: "harbor-ui"


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: notary-signer
    spec:
      containers:
      - name: notary-signer
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:abc58772015@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-notary"


---
# Source: harbor/templates/redis/redis.dp.yml
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: redis
spec:
  replicas: 1
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/redis:4.0.1-alpine
        imagePullPolicy: IfNotPresent
        args: ["--save","''","--appendonly","no"]
        ports:
        - name: redis
          containerPort: 6379
---
# Source: harbor/templates/ui/ui-dpl.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "harbor-ui"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: ui
spec:
  replicas: 1
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: ui
    spec:
      containers:
      - name: ui
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/harbor-ui:dev
        imagePullPolicy: IfNotPresent
        env:
          - name: UI_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-ui"
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-ui"
                key: jobserviceSecret
          - name: _REDIS_URL
            value: harbor-redis:6379,100,
          - name: GODEBUG
            value: netdns=cgo
          - name: LOG_LEVEL
            value: debug
          - name: CONFIG_PATH
            value: /etc/ui/app.conf
          - name: ENABLE_HARBOR_SCAN_ON_PUSH
            value: "1"
          - name: ADMINSERVER_URL
            value: "http://harbor-adminserver"
          - name: CHART_CACHE_DRIVER
            value: "redis"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: ui-config
          mountPath: /etc/ui/app.conf
          subPath: app.conf
        - name: ui-secrets-key
          mountPath: /etc/ui/key
          subPath: key
        - name: ui-secrets-private-key
          mountPath: /etc/ui/private_key.pem
          subPath: tokenServicePrivateKey
        - name: ca-download
          mountPath: /etc/ui/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/ui/token
      volumes:
      - name: ui-config
        configMap:
          name: "harbor-ui"
      - name: ui-secrets-key
        secret:
          secretName: "harbor-ui"
          items:
            - key: secretKey
              path: key
      - name: ui-secrets-private-key
        secret:
          secretName: "harbor-ui"
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/adminserver/adminserver-ss.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: adminserver
spec:
  replicas: 1
  serviceName: "harbor-adminserver"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: adminserver
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: adminserver
    spec:
      containers:
      - name: adminserver
        image: "registry-vpc.cn-qingdao.aliyuncs.com/wod/harbor-adminserver:dev"
        imagePullPolicy: "IfNotPresent"
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-adminserver"
        - secretRef:
            name: "harbor-adminserver"
        env:
          - name: PORT
            value: "8080"
          - name: JSON_CFG_STORE_PATH
            value: /etc/adminserver/config/config.json
          - name: KEY_PATH
            value: /etc/adminserver/key
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: adminserver-config
          mountPath: /etc/adminserver/config
        - name: adminserver-key
          mountPath: /etc/adminserver/key
          subPath: key
      volumes:
      - name: adminserver-key
        secret:
          secretName: "harbor-adminserver"
          items:
          - key: secretKey
            path: key
  volumeClaimTemplates:
  - metadata:
      name: adminserver-config
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast"
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/chartmuseum/chartmuseum-ss.yaml

apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  serviceName: "harbor-chartmuseum"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: chartmuseum
    spec:
      containers:
      - name: chartmuseum
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/chartmuseum-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        ports:
        - containerPort: 9999
        # TODO: update it after moving the storage out of registry scope
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
  volumeClaimTemplates:
  - metadata:
      name: chartmuseum-data
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast"
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: database
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/harbor-db:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        envFrom:
          - secretRef:
              name: "harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast"
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/registry/registry-ss.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
    component: registry
spec:
  replicas: 1
  serviceName: "harbor-registry"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor-0.2.0
        app: "harbor"
        component: registry
    spec:
      containers:
      - name: registry
        image: registry-vpc.cn-qingdao.aliyuncs.com/wod/registry-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        env:
          - name: REGISTRY_HTTP_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-registry"
                key: httpSecret
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /var/lib/registry
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tokenServiceRootCertBundle
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: "harbor-ui"
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        hostPath:
          path: /etc/kubernetes/data/registry
      nodeSelector:
        kubernetes.io/hostname: 172.31.14.41
        

---
# Source: harbor/templates/ingress/ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor-0.2.0
    app: "harbor"
  annotations:
    null
    
spec:
# 
#   tls:
#   - hosts:
#     - "harbor.wodcloud.com"
#     - "notary-harbor.wodcloud.com"
#     
#     secretName: "harbor-ingress"
#     
# 
  rules:
  - host: "harbor.wodcloud.com"
    http:
      paths:
      - path: /
        backend:
          serviceName: harbor-ui
          servicePort: 80
  - host: "notary-harbor.wodcloud.com"
    http:
      paths:
      - path: /
        backend:
          serviceName: harbor-notary-server
          servicePort: 4443

